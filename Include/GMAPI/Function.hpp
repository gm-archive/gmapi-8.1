/* Copyright (c) 2011 William Newbery
 * 
 * This software is provided 'as-is', without any express or implied
 * warranty. In no event will the authors be held liable for any damages
 * arising from the use of this software.
 * 
 * Permission is granted to anyone to use this software for any purpose,
 * including commercial applications, and to alter it and redistribute it
 * freely, subject to the following restrictions:
 * 
 * 1. The origin of this software must not be misrepresented; you must not
 * claim that you wrote the original software. If you use this software
 * in a product, an acknowledgment in the product documentation would be
 * appreciated but is not required.
 * 
 * 2. Altered source versions must be plainly marked as such, and must not be
 * misrepresented as being the original software.
 * 
 * 3. This notice may not be removed or altered from any source
 * distribution.
 */
#ifndef GMAPI_FUNCTION_HPP
#define GMAPI_FUNCTION_HPP
#include "Value.hpp"
#include "Instance.hpp"
namespace gm
{
    typedef void *Function;
    GMAPI_DLL extern Function functions[];
    
    inline Value docall(Function f, Instance *self, Instance *other, unsigned argcnt, Value *args);
    inline Value docall(Function f, unsigned argcnt, Value *args)
    {
        return docall(f, getSelf(), getOther(), argcnt, args);
    }
    inline Value docall(Function f, Instance *self, Instance *other, unsigned argcnt, Value *args)
    {
        Value retv;
        __asm
        {
            push args
            push argcnt
            lea eax, retv
            push eax
            mov eax, other
            mov edx, self
            mov ecx, argcnt
            call f
        }
        return retv;
    }
    
    inline Value call(Function func)
    {
        return docall(func, 0, 0);
    }
    //----AUTOGENERATED CODE----//
    inline Value call(Function func, Value arg0)
    {
        return docall(func, 1, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1)
    {
        return docall(func, 2, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2)
    {
        return docall(func, 3, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3)
    {
        return docall(func, 4, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4)
    {
        return docall(func, 5, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5)
    {
        return docall(func, 6, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5, Value arg6)
    {
        return docall(func, 7, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5, Value arg6, Value arg7)
    {
        return docall(func, 8, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5, Value arg6, Value arg7, Value arg8)
    {
        return docall(func, 9, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5, Value arg6, Value arg7, Value arg8, Value arg9)
    {
        return docall(func, 10, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5, Value arg6, Value arg7, Value arg8, Value arg9, Value arg10)
    {
        return docall(func, 11, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5, Value arg6, Value arg7, Value arg8, Value arg9, Value arg10, Value arg11)
    {
        return docall(func, 12, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5, Value arg6, Value arg7, Value arg8, Value arg9, Value arg10, Value arg11, Value arg12)
    {
        return docall(func, 13, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5, Value arg6, Value arg7, Value arg8, Value arg9, Value arg10, Value arg11, Value arg12, Value arg13)
    {
        return docall(func, 14, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5, Value arg6, Value arg7, Value arg8, Value arg9, Value arg10, Value arg11, Value arg12, Value arg13, Value arg14)
    {
        return docall(func, 15, &arg0);
    }
    inline Value call(Function func, Value arg0, Value arg1, Value arg2, Value arg3, Value arg4, Value arg5, Value arg6, Value arg7, Value arg8, Value arg9, Value arg10, Value arg11, Value arg12, Value arg13, Value arg14, Value arg15)
    {
        return docall(func, 16, &arg0);
    }
}
#endif
